# WebSocket proxying
# map $http_upgrade $connection_upgrade {
#     default         upgrade;
#     ''              close;
# }

error_log /dev/stdout info;

events {
    worker_connections 1024;
}

http {
    gzip on;
    gzip_min_length  500;
    gzip_proxied     any;
    gzip_comp_level 4;
    gzip_types  text/css text/javascript text/xml text/plain text/x-component application/javascript application/json application/xml application/rss+xml font/truetype font/opentype application/vnd.ms-fontobject image/svg+xml;
    gzip_vary on;
    
    upstream node-app {
        least_conn;
        server gateway:3100 weight=10 max_fails=3 fail_timeout=30s;
        # server cache:3001 weight=10 max_fails=3 fail_timeout=30s;
        # server node3:8080 weight=10 max_fails=3 fail_timeout=30s;
    }

        
    server {
        listen 80;
    
        location / {
            proxy_pass http://node-app;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }

        # location ~ ^/images/(.*)/(.*)$ {
        #      try_files /usr/src/images/$1/$2 /usr/src/images/default/profile/nl.png;
        #     # try_files $uri $uri/ /usr/src/images/$1/$2;
        # }
    }
}

# server {
#     listen 80;
#     server_name frontend-freelance.com www.frontend-freelance.com;
#     location / {
#         proxy_set_header Upgrade $http_upgrade;
#         proxy_set_header Connection "Upgrade";
#         proxy_set_header   X-Real-IP $remote_addr;
#         proxy_set_header   Host      $http_host;
#         proxy_pass         http://localhost:3100;
#     }

#     ssl_session_cache shared:SSL:20m;

#     listen 443 ssl; # managed by Certbot
#     ssl_certificate /etc/letsencrypt/live/frontend-freelance.com/fullchain.pem; # managed by Certbot
#     ssl_certificate_key /etc/letsencrypt/live/frontend-freelance.com/privkey.pem; # managed by Certbot
#     include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
#     ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
#     ssl_protocols TLSv1 TLSv1.1 TLSv1.2;

#     if ($scheme != "https") {
#         return 301 https://$host$request_uri;
#     } # managed by Certbot


#     Redirect non-https traffic to https
#     if ($scheme != "https") {
#         return 301 https://$host$request_uri;
#     } # managed by Certbot

# }