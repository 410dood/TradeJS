error_log /dev/stdout info;

events {
    worker_connections 1024;
}

http {
    # Specify MIME types for files.
    include       mime.types;

    # Update charset_types to match updated mime.types.
    # text/html is always included by charset module.
    # Default: text/html text/xml text/plain text/vnd.wap.wml application/javascript application/rss+xml
    charset_types
    text/css
    text/plain
    text/vnd.wap.wml
    application/javascript
    application/json
    application/rss+xml
    application/xml;

    gzip on;
    gzip_min_length  500;
    gzip_proxied     any;
    gzip_comp_level 4;
    gzip_types  text/css text/javascript text/xml text/plain text/x-component application/javascript application/json application/xml application/rss+xml font/truetype font/opentype application/vnd.ms-fontobject image/svg+xml;
    gzip_vary on;

    # WebSocket proxying
    map $http_upgrade $connection_upgrade {
        default         upgrade;
        ''              close;
    }
    
    upstream node-app {
        least_conn;
        server gateway:3100 weight=10 max_fails=3 fail_timeout=30s;
    }

    server{
        listen 80;
        server_name frontend-freelance.com www.frontend-freelance.com;
        return 301 https://$host$request_uri;
    }
  
    server {
        listen 443 ssl http2;
        server_name frontend-freelance.com www.frontend-freelance.com;

        root /usr/src/app/client/www/;
        index index.html;

        # ssl on;
        ssl_session_cache shared:SSL:20m;
        ssl_certificate /usr/src/app/server-nginx/letsencrypt/live/frontend-freelance.com/fullchain.pem; # managed by Certbot
        ssl_certificate_key /usr/src/app/server-nginx/letsencrypt/live/frontend-freelance.com/privkey.pem; # managed by Certbot
        include /usr/src/app/server-nginx/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
        ssl_dhparam /usr/src/app/server-nginx/letsencrypt/ssl-dhparams.pem; # managed by Certbot
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;

        # Redirect non-https traffic to https
        # if ($scheme != "https") {
        #     return 301 https://$host$request_uri;
        # }

        location ~ ^/images/(.*)$ {
            try_files /../../images/$1 /../../images/default/profile/nl.png =404;
        }
    
        location ~ ^/api/ {
            proxy_pass http://node-app;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }

        location ~ ^/socket.io/ {
            proxy_pass http://node-app;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }
    }
}