version: '3.3'

services:
  mongodb:
    restart: always
    image: mongo:latest
    container_name: "mongodb"
    environment:
      - MONGO_DATA_DIR=/data/db
      - MONGO_LOG_DIR=/dev/null
    volumes:
      - ./data/db:/data/db
    ports:
      - 27017:27017
    command: mongod --smallfiles --logpath=/dev/null # --quiet
    # networks:
      # - backend
    configs:
    # to avoid changes to the original mongo image, we import the healthcheck script using configs
      - mongo-healthcheck
    # it simply checks that the client can connect to mongo. No test is run w.r.t. the cluster.
    # healthcheck:
    #   interval: 1m
    #   timeout: 10s
    #   retries: 3
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
      update_config:
        parallelism: 1
        delay: 1m30s
  cache:
    restart: always
    image: cache
    container_name: "cache"
    build:
      context: ./
      dockerfile: server-cache/Dockerfile
    ports:
      - "3001"
    volumes:
      - ./server-cache:/usr/src/app/server-cache
      - /usr/src/app/server-cache/node_modules
    links:
      - nginx
      - redis
      - mongodb
  nginx:
    restart: always
    build: ./server-nginx
    image: nginx
    container_name: nginx
    # ports:
    #   - "80:80"
    volumes:
      - ./images:/usr/src/images
  redis:
    restart: always
    image: "redis:alpine"
    ports:
        - "6379"
    container_name: redis
  gateway:
    restart: always
    image: mhart/alpine-node:8.9.4
    container_name: gateway
    build:
      context: ./
      dockerfile: ./server-gateway/Dockerfile
    ports:
      - "3100"
    volumes:
      - ./tradejs.config.js:/usr/src/app/tradejs.config.js
      - ./tradejs.config.custom.js:/usr/src/app/tradejs.config.custom.js
      - ./client:/usr/src/app/client
      - ./images:/usr/src/app/images
      - ./server-gateway:/usr/src/app/server-gateway
      - /usr/src/app/server-gateway/node_modules
    depends_on:
      - nginx
      - redis
      - client
    links:
      - user
      - cache
  client:
    restart: always
    image: client
    container_name: client
    build:
      context: ./
      dockerfile: /client/Dockerfile
    ports:
      - "4200:4200"
    volumes:
      - ./client:/usr/src/app/client
      - /usr/src/app/client/node_modules
      - /usr/src/app/client/dist
  user:
    image: user
    container_name: user
    build:
      context: ./
      dockerfile: server-user/Dockerfile
    ports:
      - "3008"
    volumes:
      - ./tradejs.config.js:/usr/src/app/tradejs.config.js
      - ./tradejs.config.custom.js:/usr/src/app/tradejs.config.custom.js
      - ./server-user:/usr/src/app/server-user
      - /usr/src/app/server-user/node_modules
    links:
      - nginx
      - redis
      - mongodb
  notify:
    image: notify
    container_name: notify
    build:
      context: ./
      dockerfile: server-notify/Dockerfile
    ports:
      - "3010"
    volumes:
      - ./server-notify:/usr/src/app/server-notify
      - /usr/src/app/server-notify/node_modules
    links:
      - nginx
      - redis
      - mongodb
  comment:
    image: comment
    container_name: comment
    build:
      context: ./
      dockerfile: server-comment/Dockerfile
    ports:
      - "3009"
    volumes:
      - ./server-comment:/usr/src/app/server-comment
      - /usr/src/app/server-comment/node_modules
    links:
      - nginx
      - redis
      - mongodb
  event:
    image: event
    container_name: event
    build:
      context: ./
      dockerfile: server-event/Dockerfile
    ports:
      - "3011"
    volumes:
      - ./server-event:/usr/src/app/server-event
      - /usr/src/app/server-event/node_modules
    links:
      - nginx
      - redis
      - mongodb
#
#  old:
#    build:
#      context: .
#      dockerfile: server/Dockerfile
#    ports:
#      - "3000:3000"
#